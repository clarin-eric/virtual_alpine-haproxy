global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log 127.0.0.1 local2

    chroot /var/lib/haproxy
    pidfile /var/run/haproxy.pid
    maxconn 4000
    user haproxy
    group haproxy
    #daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats
    tune.ssl.default-dh-param 2048

defaults
    log global
    maxconn 3000
    mode http
    option dontlognull
    option forwardfor except 127.0.0.0/8
    option http-server-close
    option httplog
    option redispatch
    retries 3
    timeout check 10s
    timeout client 1m
    timeout connect 10s
    timeout http-keep-alive 10s
    timeout http-request 10s
    timeout queue 1m
    timeout server 1m

frontend frontend_centre_registry
    # bind :80
    # use_backend be_dummy if !{ ssl_fc }
    bind 0.0.0.0:443 ssl crt /root/certstore/wildcard-clarin-eu-new/bundle_then_key.pem
    default_backend backend_centre_registry
    mode http

backend backend_centre_registry
    http-response set-header X-Forwarded-Proto: https
    http-response set-header Strict-Transport-Security max-age=16000000;\ includeSubDomains;\ preload;
    mode http
    option forwardfor
    option http-server-close
    server s1 centre_registry:8000
    ## PROXY protocol does not work correctly with Gunicorn, apparently.
    # send-proxy-v2

# be_dummy
   # http-response set-header Strict-Transport-Security max-age=16000000;\ includeSubDomains;\ preload;
   # server haproxy_fe_dummy_ssl_redirect 127.0.0.1:8000

# frontend fe_dummy
   # bind 127.0.0.1:8000
   # http-request redirect scheme https

listen https-in
    bind 0.0.0.0:443